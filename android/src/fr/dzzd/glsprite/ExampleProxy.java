/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2017 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package fr.dzzd.glsprite;



import java.util.HashMap;

import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollObject;
import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiC;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.view.TiCompositeLayout;
import org.appcelerator.titanium.view.TiCompositeLayout.LayoutArrangement;
import org.appcelerator.titanium.view.TiUIView;

import android.app.Activity;


// This proxy can be created by calling Glsprite.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule=GlspriteModule.class)
public class ExampleProxy extends TiViewProxy
{
	// Standard Debugging variables
	private static final String LCAT = "ExampleProxy";
	private static final boolean DBG = TiConfig.LOGD;

	private GLView glView = null;
    private KrollFunction onDrawCallback = null;


	// Constructor
	public ExampleProxy()
	{
		super();
	}

	@Override
	public TiUIView createView(Activity activity)
	{
		Log.i("GLSprite", "ExampleProxy.createView(activity)");
		this.glView = new GLView(this);
		this.glView.getLayoutParams().autoFillsHeight = true;
		this.glView.getLayoutParams().autoFillsWidth = true;
		return this.glView;
	}

	// Handle creation options
	@Override
	public void handleCreationDict(KrollDict options)
	{
		super.handleCreationDict(options);

		Log.i("GLSprite", "ExampleProxy.handleCreationDict(KrollDict)");

		if (options.containsKey("message")) 
		{
			Log.i("GLSprite", "ExampleProxy.handleCreationDict(KrollDict) => option.containsKey('message')");
		}

		if (options.containsKey("ondraw")) 
		{
			this.setOndraw(options.get("ondraw"));
		}
	}

	public void onDrawCallback()
	{
		if(this.onDrawCallback != null)
		{
			HashMap<String, String> event = new HashMap<String, String>();
    		this.onDrawCallback.call(this.getKrollObject(), event);
		}
	}


	// Methods
	@Kroll.setProperty @Kroll.method
	public void setOndraw(Object callback)
	{
		Log.i("GLSprite", "ExampleProxy.setOndraw(callback)");
		this.onDrawCallback = (KrollFunction)callback;
	}


	@Kroll.getProperty @Kroll.method
	public String getMessage()
	{
        return "Hello World from my module";
	}

	@Kroll.setProperty @Kroll.method
	public void setMessage(String message)
	{
	    Log.i("GLSprite", "ExampleProxy.setMessage(" + message + ")");
	}

	@Kroll.method
	public void printMessage(String message)
	{
	    Log.i("GLSprite", "ExampleProxy.printMessage(" + message + ")");
	}
}
